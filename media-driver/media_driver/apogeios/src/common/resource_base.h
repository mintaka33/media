/*===================== begin_copyright_notice ==================================

INTEL CONFIDENTIAL
Copyright 2017
Intel Corporation All Rights Reserved.

The source code contained or described herein and all documents related to the
source code ("Material") are owned by Intel Corporation or its suppliers or
licensors. Title to the Material remains with Intel Corporation or its suppliers
and licensors. The Material contains trade secrets and proprietary and confidential
information of Intel or its suppliers and licensors. The Material is protected by
worldwide copyright and trade secret laws and treaty provisions. No part of the
Material may be used, copied, reproduced, modified, published, uploaded, posted,
transmitted, distributed, or disclosed in any way without Intel's prior express
written permission.

No license under any patent, copyright, trade secret or other intellectual
property right is granted to or conferred upon you by disclosure or delivery
of the Materials, either expressly, by implication, inducement, estoppel
or otherwise. Any license under such intellectual property rights must be
express and approved by Intel in writing.

======================= end_copyright_notice ==================================*/

//!
//! \file     resource_base.h
//! \brief    media resource base class definition
//! \details
//!

#pragma once

#include <stdint.h>

namespace Apogeios
{

enum RESOURCE_TYPE
{
    RES_TYPE_INVALID = -1,
    RES_TYPE_BUFFER,
    RES_TYPE_2D,
    RES_TYPE_VOLUME,
};

enum TILE_TYPE
{
    TILE_TYPE_X,
    TILE_TYPE_Y,
    TILE_TYPE_YF,            // 4KB tile
    TILE_TYPE_YS,            // 64KB tile
    TILE_TYPE_LINEAR,
    TILE_TYPE_INVALID
};

enum RES_FORMAT
{
    RES_FORMAT_INVALID = -14,
    RES_FORMAT_Source = -13,
    RES_FORMAT_420O = -12,
    RES_FORMAT_RGB_Swap = -11,
    RES_FORMAT_RGB_No_Swap = -10,
    RES_FORMAT_RGB = -9,
    RES_FORMAT_RGB32 = -8,
    RES_FORMAT_PA = -7,
    RES_FORMAT_PL2 = -6,
    RES_FORMAT_PL2_UnAligned = -5,
    RES_FORMAT_PL3 = -4,
    RES_FORMAT_PL3_RGB = -3,
    RES_FORMAT_PAL = -2,
    RES_FORMAT_None = -1,
    RES_FORMAT_Any = 0,
    RES_FORMAT_A8R8G8B8,
    RES_FORMAT_X8R8G8B8,
    RES_FORMAT_A8B8G8R8,
    RES_FORMAT_X8B8G8R8,
    RES_FORMAT_A16B16G16R16,
    RES_FORMAT_A16R16G16B16,
    RES_FORMAT_R5G6B5,
    RES_FORMAT_R32U,
    RES_FORMAT_R32F,
    RES_FORMAT_R8G8B8,
    RES_FORMAT_RGBP,
    RES_FORMAT_BGRP,
    RES_FORMAT_YUY2,
    RES_FORMAT_YUYV,
    RES_FORMAT_YVYU,
    RES_FORMAT_UYVY,
    RES_FORMAT_VYUY,
    RES_FORMAT_Y216,
    RES_FORMAT_Y210,
    RES_FORMAT_Y416,
    RES_FORMAT_AYUV,
    RES_FORMAT_AUYV,
    RES_FORMAT_Y410,
    RES_FORMAT_400P,
    RES_FORMAT_NV12,
    RES_FORMAT_NV12_UnAligned,
    RES_FORMAT_NV21,
    RES_FORMAT_NV11,
    RES_FORMAT_NV11_UnAligned,
    RES_FORMAT_P208,
    RES_FORMAT_P208_UnAligned,
    RES_FORMAT_IMC1,
    RES_FORMAT_IMC2,
    RES_FORMAT_IMC3,
    RES_FORMAT_IMC4,
    RES_FORMAT_422H,
    RES_FORMAT_422V,
    RES_FORMAT_444P,
    RES_FORMAT_411P,
    RES_FORMAT_411R,
    RES_FORMAT_I420,
    RES_FORMAT_IYUV,
    RES_FORMAT_YV12,
    RES_FORMAT_YVU9,
    RES_FORMAT_AI44,
    RES_FORMAT_IA44,
    RES_FORMAT_P8,
    RES_FORMAT_A8P8,
    RES_FORMAT_A8,
    RES_FORMAT_L8,
    RES_FORMAT_A4L4,
    RES_FORMAT_A8L8,
    RES_FORMAT_IRW0,
    RES_FORMAT_IRW1,
    RES_FORMAT_IRW2,
    RES_FORMAT_IRW3,
    RES_FORMAT_IRW4,
    RES_FORMAT_IRW5,
    RES_FORMAT_IRW6,
    RES_FORMAT_IRW7,
    RES_FORMAT_STMM,
    RES_FORMAT_Buffer,
    RES_FORMAT_Buffer_2D,
    RES_FORMAT_V8U8,
    RES_FORMAT_R32S,
    RES_FORMAT_R8U,
    RES_FORMAT_R8G8UN,
    RES_FORMAT_R8G8SN,
    RES_FORMAT_G8R8_G8B8,
    RES_FORMAT_R16U,
    RES_FORMAT_R16S,
    RES_FORMAT_R16UN,
    RES_FORMAT_RAW,
    RES_FORMAT_Y8,
    RES_FORMAT_Y1,
    RES_FORMAT_Y16U,
    RES_FORMAT_Y16S,
    RES_FORMAT_L16,
    RES_FORMAT_D16,
    RES_FORMAT_R10G10B10A2,
    RES_FORMAT_B10G10R10A2,
    RES_FORMAT_P016,
    RES_FORMAT_P010,
    RES_FORMAT_YV12_Planar,
    RES_FORMAT_A16B16G16R16F,
    RES_FORMAT_R16G16UN,
    RES_FORMAT_R16F,
    RES_FORMAT_P210,
    RES_FORMAT_P216,
    RES_FORMAT_A16R16G16B16F,
    RES_FORMAT_YUY2V,
    RES_FORMAT_Y216V,
    RES_FORMAT_Count
};

enum GFX_FORMAT
{
    GFX_FORMAT_R32G32B32A32_FLOAT = 0x000,
    GFX_FORMAT_R32G32B32A32_SINT = 0x001,
    GFX_FORMAT_R32G32B32A32_UINT = 0x002,
    GFX_FORMAT_R32G32B32A32_UNORM = 0x003,
    GFX_FORMAT_R32G32B32A32_SNORM = 0x004,
    GFX_FORMAT_R64G64_FLOAT = 0x005,
    GFX_FORMAT_R32G32B32X32_FLOAT = 0x006,
    GFX_FORMAT_R32G32B32A32_SSCALED = 0x007,
    GFX_FORMAT_R32G32B32A32_USCALED = 0x008,
    GFX_FORMAT_R16B16_UNORM_SAMPLE_8X8 = 0x017,
    GFX_FORMAT_R32G32B32_FLOAT = 0x040,
    GFX_FORMAT_R32G32B32_SINT = 0x041,
    GFX_FORMAT_R32G32B32_UINT = 0x042,
    GFX_FORMAT_R32G32B32_UNORM = 0x043,
    GFX_FORMAT_R32G32B32_SNORM = 0x044,
    GFX_FORMAT_R32G32B32_SSCALED = 0x045,
    GFX_FORMAT_R32G32B32_USCALED = 0x046,
    GFX_FORMAT_R16G16B16A16_UNORM = 0x080,
    GFX_FORMAT_R16G16B16A16_SNORM = 0x081,
    GFX_FORMAT_R16G16B16A16_SINT = 0x082,
    GFX_FORMAT_R16G16B16A16_UINT = 0x083,
    GFX_FORMAT_R16G16B16A16_FLOAT = 0x084,
    GFX_FORMAT_R32G32_FLOAT = 0x085,
    GFX_FORMAT_R32G32_SINT = 0x086,
    GFX_FORMAT_R32G32_UINT = 0x087,
    GFX_FORMAT_R32_FLOAT_X8X24_TYPELESS = 0x088,
    GFX_FORMAT_X32_TYPELESS_G8X24_UINT = 0x089,
    GFX_FORMAT_L32A32_FLOAT = 0x08A,
    GFX_FORMAT_R32G32_UNORM = 0x08B,
    GFX_FORMAT_R32G32_SNORM = 0x08C,
    GFX_FORMAT_R64_FLOAT = 0x08D,
    GFX_FORMAT_R16G16B16X16_UNORM = 0x08E,
    GFX_FORMAT_R16G16B16X16_FLOAT = 0x08F,
    GFX_FORMAT_A32X32_FLOAT = 0x090,
    GFX_FORMAT_L32X32_FLOAT = 0x091,
    GFX_FORMAT_I32X32_FLOAT = 0x092,
    GFX_FORMAT_R16G16B16A16_SSCALED = 0x093,
    GFX_FORMAT_R16G16B16A16_USCALED = 0x094,
    GFX_FORMAT_R32G32_SSCALED = 0x095,
    GFX_FORMAT_R32G32_USCALED = 0x096,
    GFX_FORMAT_B8G8R8A8_UNORM = 0x0C0,
    GFX_FORMAT_B8G8R8A8_UNORM_SRGB = 0x0C1,
    GFX_FORMAT_R10G10B10A2_UNORM = 0x0C2,
    GFX_FORMAT_R10G10B10A2_UNORM_SRGB = 0x0C3,
    GFX_FORMAT_R10G10B10A2_UINT = 0x0C4,
    GFX_FORMAT_R10G10B10_SNORM_A2_UNORM = 0x0C5,
    GFX_FORMAT_R8G8B8A8_UNORM = 0x0C7,
    GFX_FORMAT_R8G8B8A8_UNORM_SRGB = 0x0C8,
    GFX_FORMAT_R8G8B8A8_SNORM = 0x0C9,
    GFX_FORMAT_R8G8B8A8_SINT = 0x0CA,
    GFX_FORMAT_R8G8B8A8_UINT = 0x0CB,
    GFX_FORMAT_R16G16_UNORM = 0x0CC,
    GFX_FORMAT_R16G16_SNORM = 0x0CD,
    GFX_FORMAT_R16G16_SINT = 0x0CE,
    GFX_FORMAT_R16G16_UINT = 0x0CF,
    GFX_FORMAT_R16G16_FLOAT = 0x0D0,
    GFX_FORMAT_B10G10R10A2_UNORM = 0x0D1,
    GFX_FORMAT_B10G10R10A2_UNORM_SRGB = 0x0D2,
    GFX_FORMAT_R11G11B10_FLOAT = 0x0D3,
    GFX_FORMAT_R32_SINT = 0x0D6,
    GFX_FORMAT_R32_UINT = 0x0D7,
    GFX_FORMAT_R32_FLOAT = 0x0D8,
    GFX_FORMAT_R24_UNORM_X8_TYPELESS = 0x0D9,
    GFX_FORMAT_X24_TYPELESS_G8_UINT = 0x0DA,
    GFX_FORMAT_L16A16_UNORM = 0x0DF,
    GFX_FORMAT_I24X8_UNORM = 0x0E0,
    GFX_FORMAT_L24X8_UNORM = 0x0E1,
    GFX_FORMAT_A24X8_UNORM = 0x0E2,
    GFX_FORMAT_I32_FLOAT = 0x0E3,
    GFX_FORMAT_L32_FLOAT = 0x0E4,
    GFX_FORMAT_A32_FLOAT = 0x0E5,
    GFX_FORMAT_B8G8R8X8_UNORM = 0x0E9,
    GFX_FORMAT_B8G8R8X8_UNORM_SRGB = 0x0EA,
    GFX_FORMAT_R8G8B8X8_UNORM = 0x0EB,
    GFX_FORMAT_R8G8B8X8_UNORM_SRGB = 0x0EC,
    GFX_FORMAT_R9G9B9E5_SHAREDEXP = 0x0ED,
    GFX_FORMAT_B10G10R10X2_UNORM = 0x0EE,
    GFX_FORMAT_L16A16_FLOAT = 0x0F0,
    GFX_FORMAT_R32_UNORM = 0x0F1,
    GFX_FORMAT_R32_SNORM = 0x0F2,
    GFX_FORMAT_R10G10B10X2_USCALED = 0x0F3,
    GFX_FORMAT_R8G8B8A8_SSCALED = 0x0F4,
    GFX_FORMAT_R8G8B8A8_USCALED = 0x0F5,
    GFX_FORMAT_R16G16_SSCALED = 0x0F6,
    GFX_FORMAT_R16G16_USCALED = 0x0F7,
    GFX_FORMAT_R32_SSCALED = 0x0F8,
    GFX_FORMAT_R32_USCALED = 0x0F9,
    GFX_FORMAT_R8B8G8A8_UNORM = 0x0FA,
    GFX_FORMAT_B5G6R5_UNORM = 0x100,
    GFX_FORMAT_B5G6R5_UNORM_SRGB = 0x101,
    GFX_FORMAT_B5G5R5A1_UNORM = 0x102,
    GFX_FORMAT_B5G5R5A1_UNORM_SRGB = 0x103,
    GFX_FORMAT_B4G4R4A4_UNORM = 0x104,
    GFX_FORMAT_B4G4R4A4_UNORM_SRGB = 0x105,
    GFX_FORMAT_R8G8_UNORM = 0x106,
    GFX_FORMAT_R8G8_SNORM = 0x107,
    GFX_FORMAT_R8G8_SINT = 0x108,
    GFX_FORMAT_R8G8_UINT = 0x109,
    GFX_FORMAT_R16_UNORM = 0x10A,
    GFX_FORMAT_R16_SNORM = 0x10B,
    GFX_FORMAT_R16_SINT = 0x10C,
    GFX_FORMAT_R16_UINT = 0x10D,
    GFX_FORMAT_R16_FLOAT = 0x10E,
    GFX_FORMAT_I16_UNORM = 0x111,
    GFX_FORMAT_L16_UNORM = 0x112,
    GFX_FORMAT_A16_UNORM = 0x113,
    GFX_FORMAT_L8A8_UNORM = 0x114,
    GFX_FORMAT_I16_FLOAT = 0x115,
    GFX_FORMAT_L16_FLOAT = 0x116,
    GFX_FORMAT_A16_FLOAT = 0x117,
    GFX_FORMAT_L8A8_UNORM_SRGB = 0x118,
    GFX_FORMAT_R5G5_SNORM_B6_UNORM = 0x119,
    GFX_FORMAT_B5G5R5X1_UNORM = 0x11A,
    GFX_FORMAT_B5G5R5X1_UNORM_SRGB = 0x11B,
    GFX_FORMAT_R8G8_SSCALED = 0x11C,
    GFX_FORMAT_R8G8_USCALED = 0x11D,
    GFX_FORMAT_R16_SSCALED = 0x11E,
    GFX_FORMAT_R16_USCALED = 0x11F,
    GFX_FORMAT_P8A8_UNORM_PALETTE_0 = 0x122,
    GFX_FORMAT_P8A8_UNORM_PALETTE_1 = 0x123,
    GFX_FORMAT_R8_UNORM = 0x140,
    GFX_FORMAT_R8_SNORM = 0x141,
    GFX_FORMAT_R8_SINT = 0x142,
    GFX_FORMAT_R8_UINT = 0x143,
    GFX_FORMAT_A8_UNORM = 0x144,
    GFX_FORMAT_I8_UNORM = 0x145,
    GFX_FORMAT_L8_UNORM = 0x146,
    GFX_FORMAT_P4A4_UNORM_PALETTE_0 = 0x147,
    GFX_FORMAT_A4P4_UNORM_PALETTE_0 = 0x148,
    GFX_FORMAT_R8_SSCALED = 0x149,
    GFX_FORMAT_R8_USCALED = 0x14A,
    GFX_FORMAT_P8_UNORM_PALETTE_0 = 0x14B,
    GFX_FORMAT_L8_UNORM_SRGB = 0x14C,
    GFX_FORMAT_P8_UNORM_PALETTE_1 = 0x14D,
    GFX_FORMAT_P4A4_UNORM_PALETTE_1 = 0x14E,
    GFX_FORMAT_A4P4_UNORM_PALETTE_1 = 0x14F,
    GFX_FORMAT_DXT1_RGB_SRGB = 0x180,
    GFX_FORMAT_R1_UINT = 0x181,
    GFX_FORMAT_YCRCB_NORMAL = 0x182,
    GFX_FORMAT_YCRCB_SWAPUVY = 0x183,
    GFX_FORMAT_P2_UNORM_PALETTE_0 = 0x184,
    GFX_FORMAT_P2_UNORM_PALETTE_1 = 0x185,
    GFX_FORMAT_BC1_UNORM = 0x186,
    GFX_FORMAT_BC2_UNORM = 0x187,
    GFX_FORMAT_BC3_UNORM = 0x188,
    GFX_FORMAT_BC4_UNORM = 0x189,
    GFX_FORMAT_BC5_UNORM = 0x18A,
    GFX_FORMAT_BC1_UNORM_SRGB = 0x18B,
    GFX_FORMAT_BC2_UNORM_SRGB = 0x18C,
    GFX_FORMAT_BC3_UNORM_SRGB = 0x18D,
    GFX_FORMAT_MONO8 = 0x18E,
    GFX_FORMAT_YCRCB_SWAPUV = 0x18F,
    GFX_FORMAT_YCRCB_SWAPY = 0x190,
    GFX_FORMAT_DXT1_RGB = 0x191,
    GFX_FORMAT_FXT1 = 0x192,
    GFX_FORMAT_R8G8B8_UNORM = 0x193,
    GFX_FORMAT_R8G8B8_SNORM = 0x194,
    GFX_FORMAT_R8G8B8_SSCALED = 0x195,
    GFX_FORMAT_R8G8B8_USCALED = 0x196,
    GFX_FORMAT_R64G64B64A64_FLOAT = 0x197,
    GFX_FORMAT_R64G64B64_FLOAT = 0x198,
    GFX_FORMAT_BC4_SNORM = 0x199,
    GFX_FORMAT_BC5_SNORM = 0x19A,
    GFX_FORMAT_R16G16B16_UNORM = 0x19C,
    GFX_FORMAT_R16G16B16_SNORM = 0x19D,
    GFX_FORMAT_R16G16B16_SSCALED = 0x19E,
    GFX_FORMAT_R16G16B16_USCALED = 0x19F,
    GFX_FORMAT_PLANAR_420_8 = 0x1A5,
    GFX_FORMAT_PLANAR_420_16 = 0x1A6,
    GFX_FORMAT_R8G8B8_UNORM_SRGB = 0x1A8,
    GFX_FORMAT_RAW = 0x1FF,
    NUM_GFX_FORMATS
};

class IResource
{
public:
    IResource();
    virtual ~IResource();

    virtual int32_t create() = 0;
    virtual int32_t destroy() = 0;
    virtual void*   lock() = 0;
    virtual int32_t unlock() = 0;
    virtual int32_t mapVA() = 0;
    virtual int32_t freeVA() = 0;
    virtual int32_t updateVA() = 0;
    virtual int32_t makeResident() = 0;
    virtual int32_t evict() = 0;

    virtual int32_t readData(uint8_t* pDst, int32_t size, int32_t offset = 0) = 0;
    virtual int32_t writeData(uint8_t* pSrc, int32_t size, int32_t offset = 0) = 0;
    virtual int32_t readFromFile() = 0;
    virtual int32_t dumpToFile() = 0;

    virtual RES_FORMAT getFormat() = 0;
    virtual int32_t getWidth() = 0;
    virtual int32_t getPitch() = 0;
    virtual int32_t getHeight() = 0;
    virtual int32_t getSize() = 0;
    virtual int32_t getUOffsetX() = 0;
    virtual int32_t getUOffsetY() = 0;
    virtual int32_t getVOffsetX() = 0;
    virtual int32_t getVOffsetY() = 0;
    virtual uint64_t getFence() = 0;
    virtual uint64_t getGpuAddress() = 0;
    virtual void* getCpuAddress() = 0;

private:
};

}